import aiohttp
from bs4 import BeautifulSoup
import re
from datetime import datetime, timedelta, time
import time as time_module
from nextcord.ext import commands, tasks
import nextcord
from database import get_collection
import json

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–æ–ª–µ–π —Å —Ä—É—Å—Å–∫–∏–º–∏
role_translation = {
    "chief_curator": "–∫—É—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞",
    "curator": "–∫—É—Ä–∞—Ç–æ—Ä",
    "chief_admin": "–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "senior_admin": "—Å—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "admin": "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "junior_admin": "–º–ª–∞–¥—à–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "senior_moderator": "—Å—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä",
    "moderator": "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä",
    "junior_moderator": "–º–ª–∞–¥—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä",
    "senior_helper": "—Å—Ç–∞—Ä—à–∏–π —Ö–µ–ª–ø–µ—Ä",
    "helper": "—Ö–µ–ª–ø–µ—Ä"
}

# –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏ –≤ –º–æ–Ω–µ—Ç–∞—Ö
local_salary_rates = {
    "—Å—Ç–∞—Ä—à–∏–π —Ö–µ–ª–ø–µ—Ä": 70,
    "–º–ª–∞–¥—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä": 90,
    "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä": 115,
    "—Å—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä": 130,
    "–º–ª–∞–¥—à–∏–π –∞–¥–º–∏–Ω": 140,
    "–∞–¥–º–∏–Ω": 180,
    "—Å—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω": 215,
    "–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": 275
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
team_4 = [
    "buterbrodius", "Ygasai", "Siukumi", "Namero", "CheloBechek", "EspadaWQ", "Globall", "Chipsi", 
    "Kotik_Krutoy", "MNks", "MuvikS", "ZERATUL02", "nubekarbuzek", "gafer", "SiO2"
]

team_10 = [
    "FomkaJulik", "-_mandarin_-", "Kinigan", "Nigma21", "ayomurdy", "dikiwark", "Mr_kompaver", 
    "MyHuC", "Sins_jok", "haruta", "Tomoe_Tamagiri", "vitaliygora976"
]

class Status(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.last_online_times = {}
        self.last_update_times = {}
        self.message_ids = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
        self.channel_id = None
        self.reset_daily_status.start()
        self.summarize_weekly_status.start()
        self.update_online_status.start()  # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        self.collection = get_collection('online_status')  # –ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        self.database_cog = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ None

    @commands.Cog.listener()
    async def on_ready(self):
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DatabaseCog –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        self.database_cog = self.bot.get_cog('DatabaseCog')
        if not self.database_cog:
            print("DatabaseCog –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–æ—Ç–∞.")

    async def parse_online_time(self, nickname):
        url = "https://loliland.ru/ru/team"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    response.raise_for_status()
                    text = await response.text()
                    soup = BeautifulSoup(text, 'html.parser')
                    nickname_divs = soup.find_all('div', class_='player__nickname')
                    for div in nickname_divs:
                        current_nick = div.get_text(strip=True)
                        if nickname.lower() == current_nick.lower():
                            player_card = div.find_parent('div', class_='player-card')
                            if not player_card:
                                continue
                            time_blocks = player_card.find_all('p', class_='pc-data-text_main-text')
                            if time_blocks:
                                return time_blocks[0].get_text(strip=True)
                            time_blocks = player_card.find_all(string=re.compile(r'\d+\s*[—á–º–∏–Ω]+'))
                            if time_blocks:
                                return time_blocks[0].strip()
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            return None

    async def update_status_for_team(self, team, team_name):
        report = f"**{team_name}:**\n"
        report += "```"
        report += f"{'–°—Ç–∞—Ç—É—Å':<3} {'–ù–∏–∫–Ω–µ–π–º':<15} {'–†–æ–ª—å':<20} {'–í—Ä–µ–º—è':<10} {'–ó–∞—Ä–ø–ª–∞—Ç–∞':<10}\n"
        report += "-" * 60 + "\n"
        
        for nickname in team:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω–∞ —Å —Å–∞–π—Ç–∞
            current_online_time = await self.parse_online_time(nickname)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            data = self.collection.find_one({"nickname": nickname})
            current_role = data.get("role", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å") if data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
            
            if current_online_time is None:
                report += f"üî¥ {nickname:<15} {'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':<20} {'-':<10} {'-':<10}\n"
                continue
            
            now = datetime.now()
            last_update_time = self.last_update_times.get(nickname)
            if last_update_time is None or (now - last_update_time).total_seconds() > 120:
                status = "üî¥"
            else:
                status = "üü¢"
            
            if self.last_online_times.get(nickname) != current_online_time:
                self.last_online_times[nickname] = current_online_time
                self.last_update_times[nickname] = now
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self.collection.update_one(
                    {"nickname": nickname},
                    {"$set": {"online_time": current_online_time, "last_updated": now}},
                    upsert=True
                )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω–ª–∞–π–Ω–∞
            salary = self.calculate_local_salary(current_online_time, current_role)
            report += f"{status:<3} {nickname:<15} {current_role:<20} {current_online_time:<10} {salary:<10}\n"
        
        report += "```\n"

        if self.channel_id:
            channel = self.bot.get_channel(self.channel_id)
            if channel:
                try:
                    if team_name not in self.message_ids:
                        message = await channel.send(report)
                        self.message_ids[team_name] = message.id
                    else:
                        message = await channel.fetch_message(self.message_ids[team_name])
                        await message.edit(content=report)
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {team_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {team_name}: {e}")

    @tasks.loop(time=time(23, 59))
    async def reset_daily_status(self):
        if self.channel_id:
            channel = self.bot.get_channel(self.channel_id)
            if channel:
                try:
                    current_date = datetime.now().strftime("%Y-%m-%d")
                    for team in [team_4, team_10]:
                        for nickname in team:
                            online_time = self.last_online_times.get(nickname, "0 —á 0 –º–∏–Ω")
                            self.collection.update_one(
                                {"nickname": nickname},
                                {"$push": {"daily_records": {"date": current_date, "online_time": online_time}}},
                                upsert=True
                            )
                    self.last_online_times.clear()
                    self.last_update_times.clear()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")

    @tasks.loop(time=time(23, 59), count=7)
    async def summarize_weekly_status(self):
        if datetime.now().weekday() == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            for team in [team_4, team_10]:
                for nickname in team:
                    records = self.collection.find_one({"nickname": nickname}).get("daily_records", [])
                    total_time = sum(self.parse_time(record["online_time"]) for record in records)
                    self.collection.update_one(
                        {"nickname": nickname},
                        {"$set": {"weekly_total": total_time}, "$unset": {"daily_records": ""}}
                    )

    def parse_time(self, time_str):
        # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã
        match = re.match(r'(\d+)\s*—á\s*(\d+)\s*–º–∏–Ω', time_str)
        if match:
            hours, minutes = map(int, match.groups())
            return hours * 60 + minutes
        return 0

    def calculate_local_salary(self, online_time: str, role: str) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –º–æ–Ω–µ—Ç–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—ã–≥—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–æ–ª–∏ –∑–∞ –ø–æ–ª–Ω—ã–π —á–∞—Å"""
        match = re.match(r'(\d+)\s*—á\s*(\d+)\s*–º–∏–Ω', online_time)
        if match:
            hours, minutes = map(int, match.groups())
            total_hours = hours  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∞—Å–∞
            rate = local_salary_rates.get(role.lower(), 0)
            return total_hours * rate
        return 0

    @nextcord.slash_command(name='setstatuschannel')
    async def set_status_channel(self, interaction: nextcord.Interaction, channel: nextcord.TextChannel):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        await interaction.response.defer(ephemeral=True)

        self.channel_id = channel.id
        message_4 = await channel.send("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ö–æ–º–∞–Ω–¥—ã #4...")
        message_10 = await channel.send("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ö–æ–º–∞–Ω–¥—ã #10...")
        self.message_ids["–ö–æ–º–∞–Ω–¥–∞ #4"] = message_4.id
        self.message_ids["–ö–æ–º–∞–Ω–¥–∞ #10"] = message_10.id

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞
        await self.update_online_status()

    @tasks.loop(seconds=5)  # –ü—Ä–∏–º–µ—Ä: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    async def update_online_status(self):
        for team, team_name in [(team_4, "–ö–æ–º–∞–Ω–¥–∞ #4"), (team_10, "–ö–æ–º–∞–Ω–¥–∞ #10")]:
            await self.update_status_for_team(team, team_name)